{
  "Web Development": {
    "easy": [
      {
        "id": "web-e-1",
        "scenario": "They claim 3 years of React. Ask how they handle state across a medium-sized app with forms and API calls.",
        "candidate": "I centralize most state in one context. For forms I rely on setState everywhere. API calls happen inside components.",
        "time": 60
      }
    ],
    "normal": [
      {
        "id": "web-n-1",
        "scenario": "They mention bundle performance. Ask for concrete steps to reduce bundle size.",
        "candidate": "I minify and sometimes lazy-load. Havenâ€™t done much code splitting; I remove console logs before deploy.",
        "time": 55
      }
    ],
    "hard": []
  },

  "Data Science": {
    "easy": [
      {
        "id": "ds-e-1",
        "scenario": "They talk about exploratory analysis. Ask their typical EDA workflow and pitfalls to avoid.",
        "candidate": "I start with missing values, distributions, outliers, then correlations. I try not to overfit insights to hypotheses.",
        "time": 60
      }
    ],
    "normal": [],
    "hard": []
  },

  "Computer Science": {
    "easy": [
      {
        "id": "cs-e-1",
        "scenario": "They say they know OS basics. Ask how a context switch works conceptually.",
        "candidate": "The scheduler saves registers/PC of the running process and restores another's state, updating stacks and tables.",
        "time": 60
      }
    ],
    "normal": [],
    "hard": []
  },

  "Machine Learning": {
    "easy": [
      {
        "id": "ml-e-1",
        "scenario": "They trained classifiers. Ask how they'd detect overfitting and fix it.",
        "candidate": "I check train vs validation curves, use regularization, data augmentation, and early stopping.",
        "time": 60
      }
    ],
    "normal": [],
    "hard": []
  },

  "Networking": {
    "easy": [
      {
        "id": "net-e-1",
        "scenario": "They debugged HTTP issues. Ask how they'd diagnose intermittent 502 errors.",
        "candidate": "I check upstream timeouts, load balancer health checks, app logs, and connection pool exhaustion.",
        "time": 60
      }
    ],
    "normal": [],
    "hard": []
  },

  "Cyber Security": {
    "easy": [
      {
        "id": "sec-e-1",
        "scenario": "They performed security reviews. Ask common web vulns and practical mitigations.",
        "candidate": "XSS (escape + CSP), CSRF (tokens + same-site), SQLi (parameterized queries), auth flaws (MFA, lockouts).",
        "time": 60
      }
    ],
    "normal": [],
    "hard": []
  },

  "Software Engineering": {
    "easy": [
      {
        "id": "se-e-1",
        "scenario": "They worked on teams. Ask their approach to code reviews that actually improve quality.",
        "candidate": "I focus on correctness, tests, readability, and actionable suggestions with examples.",
        "time": 60
      }
    ],
    "normal": [],
    "hard": []
  },

  "Cloud Computing": {
    "easy": [
      {
        "id": "cloud-e-1",
        "scenario": "They deployed to the cloud. Ask how they'd design blue/green deployment with safe rollbacks.",
        "candidate": "Two identical environments behind LB, shift traffic gradually, health checks, and quick revert on issues.",
        "time": 60
      }
    ],
    "normal": [],
    "hard": []
  },

  "Mobile App Development": {
    "easy": [
      {
        "id": "mob-e-1",
        "scenario": "They built apps with offline mode. Ask how they'd handle sync conflicts.",
        "candidate": "Use conflict resolution strategies like last-write-wins or CRDTs; show diffs to users when needed.",
        "time": 60
      }
    ],
    "normal": [],
    "hard": []
  },

  "Database Management": {
    "easy": [
      {
        "id": "db-e-1",
        "scenario": "They optimized queries. Ask how they'd diagnose a slow SELECT on a big table.",
        "candidate": "I EXPLAIN the plan, add proper indexes, check filters/sorts vs indexes, and watch for N+1 patterns.",
        "time": 60
      }
    ],
    "normal": [],
    "hard": []
  },

  "curveball": [
    {
      "id": "cb-1",
      "scenario": "Your team lost a day's work due to a bad merge. What do you do in the next 30 minutes?",
      "candidate": "Stabilize: freeze deploys, communicate, identify last known good, restore, then document and add safeguards.",
      "time": 30
    },
    {
      "id": "cb-2",
      "scenario": "You shipped a bug to production. How will you communicate with stakeholders while fixing it?",
      "candidate": "Provide clear impact, ETA, workaround, and regular updates; avoid speculation; do a postmortem later.",
      "time": 30
    }
  ]
}
